/*******************************************************************************
 * This program answers the request: push n distinct integers from 0 to n-1 in
 * order onto a stack, and intermix pop operation in the push sequence, can the
 * stack be used to generate a given permutation of these numbers?
 *
 * Pattern 312 cannot be generated by a single stack.
 * for a[i], a[i+1], a[i+2],
 * if a[i] > a[i+2] > a[i+1], then it is pattern 312.
 *
 * This program can also generate the operation sequence that is used to
 * generate the generable target permutation.
 *
 * Sample execution:
 *
 * $ java-algs4 StackPermutable < stack_permutable_in
 * (4 3 2 1 0 9 8 7 6 5) can be generated by a stack? true
 * +++++-----+++++-----
 * (4 3 2 1 0 9 8 7 6 5) is generated using the above operation sequence.
 *
 * (4 6 8 7 5 3 2 9 0 1) can be generated by a stack? false
 *
 * (2 0 1) can be generated by a stack? false
 *
 * (0 1 2) can be generated by a stack? true
 * +-+-+-
 * (0 1 2) is generated using the above operation sequence.
 *
 * @author Ryan Duan <duanpanda@gmail.com>
 ******************************************************************************/

import edu.princeton.cs.algs4.Stack;
import java.util.ArrayList;

public class StackPermutable {

    /**
     * Can a stack generate the given sequence by inputting int 0 to n-1?
     *  runtime complexity: O(n)
     *  pattern 312 cannot be generated by a single stack
     */
    public static boolean canGenerate(int[] a) {
        for (int i = 0; i < a.length - 2; i++) {
            if (a[i] > a[i+2] && a[i+2] > a[i+1]) {
                return false;
            }
        }
        return true;
    }

    /**
     * If a stack can generate the target sequence by inputting int 0 to n-1,
     * then this method can get the generator which is an intermixed sequence
     * of stack push and pop operations.  The returned value is a string
     * sequence in which "+" denotes a push and "-" denotes a pop.
     */
    public static ArrayList<String> getGenerator(int[] target) {
        if (target.length == 0)
            return null;

        ArrayList<String> ops = new ArrayList<String>(target.length);
        Stack<Integer> stack = new Stack<Integer>();
        int i = 0;              // target array index
        int j = 0;              // 0 to n-1 input sequence iterator
        stack.push(j);
        ops.add("+");
        for (i = 0; i < target.length; i++) {
            while (stack.isEmpty() || target[i] > stack.peek()) {
                stack.push(++j);
                ops.add("+");
            }
            assert target[i] == j : "cannot be generated";
            stack.pop();
            ops.add("-");
        }
        return ops;
    }

    /**
     * Using the generator (a push and pop sequence) and inputting 0, 1, 2, ...
     * to generate a permutation of the input numbers.
     */
    public static int[] generate(ArrayList<String> generator) {
        int i = 0;              // next integer to be put int the result
        Stack<Integer> stack = new Stack<Integer>();
        ArrayList<Integer> result = new ArrayList<Integer>();
        for (String op : generator) {
            if (op.equals("+")) {
                stack.push(i);
                i++;
            }
            else if (op.equals("-")) {
                result.add(stack.pop());
            }
        }
        int[] r = new int[result.size()];
        for (int j = 0; j < result.size(); j++) {
            r[j] = result.get(j);
        }
        return r;
    }

    private static void printIntList(int[] a) {
        StdOut.print("(");
        int i;
        for (i = 0; i < a.length - 1; i++) {
            StdOut.print(a[i] + " ");
        }
        StdOut.print(a[i] + ")");
    }

    // print operation sequence
    private static void printOpSeq(ArrayList<String> opseq) {
        for (String s : opseq) {
            StdOut.print(s);
        }
    }

    public static void main(String[] args) {
        while (!StdIn.isEmpty()) {
            int n = StdIn.readInt();
            int[] a = new int[n];
            for (int i = 0; i < n; i++) {
                a[i] = StdIn.readInt();
            }

            printIntList(a);
            boolean canGen = canGenerate(a);
            StdOut.println(" can be generated by a stack? " + canGen);

            if (canGen) {
                ArrayList<String> opseq = getGenerator(a);

                printOpSeq(opseq);
                StdOut.println();

                printIntList(generate(opseq));
                StdOut.println(" is generated using the above operation sequence.");
            }
            StdOut.println();
        }
    }
}
